#pragma version 10

smart_contracts.voting.contract.Voting.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    txn NumAppArgs
    bz main_bare_routing@10
    method "set_topic(string)void"
    method "vote(pay)bool"
    method "get_votes()uint64"
    method "opt_in()void"
    txna ApplicationArgs 0
    match main_set_topic_route@4 main_vote_route@5 main_get_votes_route@6 main_opt_in_route@7
    err // reject transaction

main_set_topic_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    callsub set_topic
    int 1
    return

main_vote_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    callsub vote
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_votes_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_votes
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_opt_in_route@7:
    txn OnCompletion
    int OptIn
    ==
    assert // OnCompletion is OptIn
    txn ApplicationID
    assert // is not creating
    int 1
    return

main_bare_routing@10:
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.voting.contract.Voting.set_topic(topic: bytes) -> void:
set_topic:
    proto 1 0
    byte "topic"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.voting.contract.Voting.vote(pay: uint64) -> bytes:
vote:
    proto 1 1
    global GroupSize
    int 2
    ==
    assert // Expected 2 transactions
    frame_dig -1
    gtxns Amount
    int 10000
    ==
    assert // Incorrect payment amount
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Payment sender must match transaction sender
    txn Sender
    int 0
    byte "voted"
    app_local_get_ex
    bury 1
    bz vote_after_if_else@2
    byte 0x00
    retsub

vote_after_if_else@2:
    int 0
    byte "votes"
    app_global_get_ex
    assert // check self.votes exists
    int 1
    +
    byte "votes"
    swap
    app_global_put
    txn Sender
    byte "voted"
    int 1
    app_local_put
    byte 0x80
    retsub


// smart_contracts.voting.contract.Voting.get_votes() -> bytes:
get_votes:
    proto 0 1
    int 0
    byte "votes"
    app_global_get_ex
    assert // check self.votes exists
    itob
    retsub


// smart_contracts.voting.contract.Voting.__init__() -> void:
__init__:
    proto 0 0
    byte "topic"
    byte 0x64656661756c745f746f706963
    app_global_put
    byte "votes"
    int 0
    app_global_put
    retsub
